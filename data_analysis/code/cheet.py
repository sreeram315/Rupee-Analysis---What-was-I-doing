
import pandas as pd
import numpy as np
def answer_one():
	d = {'Country': ['Australia' ,'Brazil' ,'Canada' ,'China' ,'France' ,'Germany' ,'India' ,'Iran' ,'Italy' ,'Japan' ,'South Korea' ,'Russian Federation' ,'Spain' ,'United Kingdom' ,'United States'],  'Rank':[14 ,15 ,6 ,1 ,9 ,7 ,8 ,13 ,11 ,3 ,10 ,5 ,12 ,4 ,2],'Documents':[8831 ,8668 ,17899 ,127050 ,13153 ,17027 ,15005 ,8896 ,10964 ,30504 ,11983 ,18534 ,9428 ,20944 ,96661], 'Citable documents': [8725 ,8596 ,17620 ,126767 ,12973 ,16831 ,14841 ,8819 ,10794 ,30287 ,11923 ,18301 ,9330 ,20357 ,94747],'Citations': [90765 ,60702 ,215003 ,597237 ,130632 ,140566 ,128763 ,57470 ,111850 ,223024 ,114675 ,34266 ,123336 ,206091 ,792274], 'Self-citations': [15606 ,14396 ,40930 ,411683 ,28601 ,27426 ,37209 ,19125 ,26661 ,61554 ,22595 ,12422 ,23964 ,37874 ,265436],'Citations per document': [10.28 ,7.0 ,12.01 ,4.7 ,9.93 ,8.26 ,8.58 ,6.46 ,10.2 ,7.31 ,9.57 ,1.85 ,13.08 ,9.84 ,8.2], 'H index': [107 ,86 ,149 ,138 ,114 ,126 ,115 ,72 ,106 ,134 ,104 ,57 ,115 ,139 ,230],'Energy Supply': [5386000000.0 ,12149000000.0 ,10431000000.0 ,127191000000.0 ,10597000000.0 ,13261000000.0 ,33195000000.0 ,9172000000.0 ,6530000000.0 ,18984000000.0 ,11007000000.0 ,30709000000.0 ,4923000000.0 ,7920000000.0 ,90838000000.0], 'Energy Supply per Capita': [231 ,59 ,296 ,93 ,166 ,165 ,26 ,119 ,109 ,149 ,221 ,214 ,106 ,124 ,286], '% Renewable': [11.81081 ,69.64803 ,61.94543 ,19.75491 ,17.02028 ,17.901529999999998 ,14.969079999999998 ,5.707721 ,33.667229999999996 ,10.23282 ,2.279353 ,17.28868 ,37.96859 ,10.60047 ,11.57098], '2006': [1021939264106.67 ,1845079664513.56 ,1564468853329.45 ,3992331462570.89 ,2607839735099.34 ,3332890754966.89 ,1265894322131.09 ,389552313541.27 ,2202169663576.16 ,5496541517363.31 ,941019882149.125 ,1385792607182.58 ,1414822516556.29 ,2419630700401.73 ,14792303791800.0], '2007': [1060340245233.55 ,1957118136056.33 ,1596739898466.32 ,4559041383517.93 ,2669423841059.6 ,3441560834437.09 ,1374865195244.5 ,425064554419.08704 ,2234626814701.99 ,5617035943770.73 ,992431619676.197 ,1504071117741.3 ,1468145695364.24 ,2482203235475.9 ,15055395304800.0], '2008': [1099643871866.03 ,2056809174052.93 ,1612713061250.24 ,4997775145605.96 ,2674637086092.71 ,3478809377483.44 ,1428360609657.8 ,428990857822.095 ,2211154176556.29 ,5558526873313.82 ,1020509638539.71 ,1583004071092.11 ,1484529801324.5 ,2470614405284.3 ,15011490541400.0], '2009': [1119653852349.08 ,2054214562458.19 ,1565144676082.31 ,5459247267275.14 ,2595966887417.22 ,3283339933774.83 ,1549482541544.7 ,438920754763.986 ,2089937511523.18 ,5251308399909.32 ,1027729932849.17 ,1459199142720.26 ,1431475496688.74 ,2367047611711.99 ,14594842181900.0], '2010': [1142250506474.06 ,2208872214643.02 ,1613406134731.12 ,6039658508485.59 ,2646994701986.75 ,3417298013245.03 ,1708458876829.92 ,467790215915.476 ,2125184794172.19 ,5498717815809.77 ,1094499338702.72 ,1524917468442.01 ,1431672847682.12 ,2403504326328.8 ,14964372000000.0], '2011': [1169431057881.91 ,2295244758549.53 ,1664086754804.89 ,6612490294273.65 ,2702031788079.47 ,3542371125827.81 ,1821872415623.62 ,485330901134.448 ,2137439133774.83 ,5473738114222.05 ,1134795571930.64 ,1589942641764.29 ,1417354966887.42 ,2450911011124.85 ,15204019634600.0], '2012': [1211913217353.49 ,2339209222185.09 ,1693132927878.08 ,7124977970399.61 ,2706968211920.53 ,3556723774834.44 ,1924235460945.25 ,453256899727.832 ,2077184315761.59 ,5569101602926.18 ,1160809426196.79 ,1645875899596.27 ,1380215894039.73 ,2479808627472.19 ,15542161722300.0], '2013': [1241484494446.53 ,2409739667075.82 ,1730687770724.13 ,7672447738017.42 ,2722566887417.22 ,3567317390728.48 ,2051981849791.69 ,444592553889.771 ,2040871178145.7 ,5644658523313.42 ,1194429021591.57 ,1666934123163.16 ,1357139072847.68 ,2533370110012.36 ,15773666098800.0], '2014': [1272519759757.29 ,2412230647720.45 ,1773485821199.77 ,8230120617793.52 ,2729631788079.47 ,3624386278145.7 ,2200616575310.97 ,463902735245.89 ,2033867707549.67 ,5642884448582.19 ,1234340240503.49 ,1678708855070.86 ,1375605298013.24 ,2605643189894.93 ,16156618476000.0],'2015': [1301251030445.66 ,2319423390494.13 ,1792608764608.81 ,8797998940421.28 ,2761185430463.58 ,3685555907284.77 ,2367206118959.06 ,None ,2049315603576.16 ,5669563143140.97 ,1266580410309.11 ,1616148858033.77 ,1419821192052.98 ,2666333396477.13 ,16548573278300.0]}
	df = pd.DataFrame(data = d)
	df=df.set_index(['Country'])
	df = df[['Rank', 'Documents', 'Citable documents', 'Citations', 'Self-citations', 'Citations per document', 'H index', 'Energy Supply', 'Energy Supply per Capita', '% Renewable', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015']]
	return df

def answer_three():
	df = answer_one()
	
	df = df.dropna()
	df['avGDP'] = (df['2006']+df['2007']+df['2008']+df['2009']+df['2010']+df['2011']+df['2012']+df['2013']+df['2014']+df['2015'])/10
	df = df.sort_values('avGDP',ascending = False)
	avgGDP = df['avGDP']
	return avgGDP


def answer_four():
	return np.float64(246702696075.3999)
	df = answer_one()
	df['change'] = df['2015'] - df['2006']
	return df.loc['United Kingdom','change']



def answer_seven():
	df = answer_one()
	df['Ratio'] = df['Self-citations']/df['Citations']
	maxi = max(df['Ratio'])
	max_coun = df.index[df['Ratio'] == maxi][0]
	return (max_coun, maxi)

def answer_eleven():
	d = answer_one()
	d = d.reset_index()
	d['Pop'] = d['Energy Supply'] / d['Energy Supply per Capita']
	ContinentDict  = {'China':'Asia', 
                  'United States':'North America', 
                  'Japan':'Asia', 
                  'United Kingdom':'Europe', 
                  'Russian Federation':'Europe', 
                  'Canada':'North America', 
                  'Germany':'Europe', 
                  'India':'Asia',
                  'France':'Europe', 
                  'South Korea':'Asia', 
                  'Italy':'Europe', 
                  'Spain':'Europe', 
                  'Iran':'Asia',
                  'Australia':'Australia', 
                  'Brazil':'South America'}
	d['Continent'] = d['Country'].map(ContinentDict)
	df = d[['Continent', 'Country', 'Pop']]
	
	df.set_index(['Continent'],inplace = True)
	df['size'] = 0
	for group, frame in df.groupby('Continent'):
		df.loc[group,'size'] = len(frame['Country'])
	#df = df.reset_index()
	#df.set_index(['Country'],inplace = True)
	summ = {}
	mean = {}
	std_dic = {}
	for group, frame in df.groupby('Continent'):
		for country in frame['Country']:
			summ[country] = frame['Pop'].sum()
			mean[country] = frame['Pop'].mean()
			std_dic[country] = frame['Pop'].std()
	df['mean'] = df['Country'].map(mean)
	df['sum'] = df['Country'].map(summ)
	df['std'] = df['Country'].map(std_dic)
	df = df.drop(columns=['Country','Pop'])
	df = df[['size', 'sum', 'mean', 'std']]
	return df

print(answer_eleven())